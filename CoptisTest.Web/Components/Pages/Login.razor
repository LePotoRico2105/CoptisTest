@page "/login"
@rendermode InteractiveServer
@inject ISessionRepository _session
@inject IUserRepository _user
@inject IAccessRepository _access
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>



<EditForm Model="@loginModel" OnValidSubmit="OnLoginClicked" class="text-center">
    <DataAnnotationsValidator />
    <h3>Access to your user area</h3>
    <hr />
    <label class="form-label">Username</label>
    <InputText id="username" class="form-control" placeholder="Type your username" @bind-Value="@loginModel.username" />
    <ValidationMessage For="@(() => loginModel.username)" />
    <br />
    <label class="form-label">Password</label>
    <InputText id="password" class="form-control" type="password" placeholder="Type your password" @bind-Value="@loginModel.password" />
    <ValidationMessage For="@(() => loginModel.password)" />
    <br />
    <p class="text-danger">@error</p>
    <input class="btn btn-primary m-1" type="submit" value="To login" />
</EditForm>
        
@code {

    private class LoginModel
    {
        [MinLength(1, ErrorMessage = "Username is required")]
        public string username { get; set; } = "";
        [MinLength(1, ErrorMessage = "Password is required")]
        public string password { get; set; } = "";
    }

    LoginModel loginModel = new LoginModel();
    private string error = "";

    async void OnLoginClicked()
    {
        var users = await _user.GetUsers();
        if (users.Any(x => x.Username == loginModel.username && x.Password == loginModel.password))
        {

            _session.ToLogin(users.First(x => x.Username == loginModel.username && x.Password == loginModel.password));
            var user = _session.GetSessionUser();
            _session.SetSessionUserAccesses((await _access.GetUserAccesses(user.UserId)).ToList());
            error = "";
            NavigationManager.NavigateTo("", true);
        }
        else error = "Login/Password incorrect";

    }
}

